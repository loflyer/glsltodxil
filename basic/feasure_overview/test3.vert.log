
################################################################GLSL######################################################
#version 450 core
#extension GL_ARB_shader_subroutine : require


out vec4 out_dynamic;

// Subroutine type
subroutine vec4 routine_type(in vec4 left, in vec4 right);

// Subroutine definitions
subroutine(routine_type) vec4 add(in vec4 left, in vec4 right)
{
    return left + right;
}

subroutine(routine_type) vec4 multiply(in vec4 left, in vec4 right)
{
    return left * right;
}

// Sub routine uniform  只有一个uniform 变量
subroutine uniform routine_type routine[9];

void main(void)
{
    out_dynamic = routine[1](vec4(1.0f,1.0f,1.0f,1.0f),vec4(2.0f,2.0f,2.0f,2.0f));
}
################################################################GLSL######################################################

################################################################LLVM######################################################
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%__ubo0 = type { [8 x float] } ; 这个地方取4*n X float  n位数组长度除以4 加 1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.extop.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %2 = call %dx.types.CBufRet.i32 @dx.extop.cbufferLoadLegacy.i32(i32 275, %dx.types.Handle %1, i32 1) ; 偏移1  所以第3个参数就是routine_type routine[9]数组下标
  %3 = extractvalue %dx.types.CBufRet.i32 %2, 0
  %4 = extractvalue %dx.types.CBufRet.i32 %2, 1
  %5 = extractvalue %dx.types.CBufRet.i32 %2, 2
  %6 = extractvalue %dx.types.CBufRet.i32 %2, 3
  %7 = icmp eq i32 %3, 0
  %8 = select i1 %7, i32 1077936128, i32 1073741824
  %9 = select i1 %7, i32 1077936128, i32 1073741824
  %10 = select i1 %7, i32 1077936128, i32 1073741824
  %11 = select i1 %7, i32 1077936128, i32 1073741824
  %12 = bitcast i32 %8 to float
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %12)
  %13 = bitcast i32 %9 to float
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %13)
  %14 = bitcast i32 %10 to float
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %14)
  %15 = bitcast i32 %11 to float
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %15)
  ret void
}

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!7}
!dx.entryPoints = !{!11}
!dx.source.contents = !{!17, !18, !19}
!dx.vk.xfb = !{}

!0 = !{!"Mesa version 22.04@release"}
!1 = !{i32 1, i32 1}
!2 = !{i32 1, i32 4}
!3 = !{!"vs", i32 6, i32 1}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %__ubo0* undef, !"__ubo0", i32 0, i32 0, i32 1, i32 32, null}
!7 = !{i32 1, void ()* @main, !8}
!8 = !{!9}
!9 = !{i32 0, !10, !10}
!10 = !{}
!11 = !{void ()* @main, !"main", !12, !4, !16}
!12 = !{null, !13, null}
!13 = !{!14}
!14 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !15, i8 2, i32 1, i8 4, i32 0, i8 0, !10}
!15 = !{i32 0}
!16 = !{i32 0, i64 1048576}
!17 = !{!"num_images", i32 0}
!18 = !{!"num_ssbos", i32 0}
!19 = !{!"float_controls_execution_mode", i32 0}
################################################################LLVM######################################################


##############################################################glsl代码###############################################
#version 450 core
#extension GL_ARB_shader_subroutine : require

uniform UBO0 {
  vec4 a;
  float b;
}ubo0;

out vec4 out_dynamic;

subroutine vec4 routine_type(in vec4 left, in vec4 right);


subroutine(routine_type) vec4 add(in vec4 left, in vec4 right)
{
    return left + right;    // (3.0,3.0,3.0,3.0)
}

subroutine(routine_type) vec4 multiply(in vec4 left, in vec4 right)
{
    return left * right;  // (2.0,2.0,2.0,2.0)
}


subroutine uniform routine_type routine[4];

void main(void)
{
    out_dynamic = routine[ubo0.a.x](vec4(1.0f,1.0f,1.0f,1.0f),vec4(2.0f,2.0f,2.0f,2.0f) );
    out_dynamic.x = ubo0.b;
}

##############################################################glsl代码#################################################



####################################################DXIL代码###########################################################

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%__ubo0 = type { [4 x float] }  ; 这个应该是编译器为了routine[4];设置的
%__ubo1 = type { [8 x float] }  ; 这个应该是UBO0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.extop.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

define void @main() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)

  ; 拿到__ubo1的第一个成员 vec4 a
  %3 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 0)
  %4 = extractvalue %dx.types.CBufRet.i32 %3, 0 ; a的第一个分量  ubo0.a.x  0,1,2,3
  %5 = extractvalue %dx.types.CBufRet.i32 %3, 1
  %6 = extractvalue %dx.types.CBufRet.i32 %3, 2
  %7 = extractvalue %dx.types.CBufRet.i32 %3, 3

  ; 1073741823<=>  0011 1111 1111 1111 1111 1111 1111 1111

  %8 = and i32 %4, 1073741823  ; 看 %4的值是多少了  %4的低30位不变化, 如果%4本来就是一个小的数,%8就等于%4  因为数组下标只取到3 所以这步操作完全没有什么作用
  %9 = call %dx.types.CBufRet.i32 @dx.extop.cbufferLoadLegacy.i32(i32 275, %dx.types.Handle %1, i32 %8); ;偏移 %8
  %10 = extractvalue %dx.types.CBufRet.i32 %9, 0
  %11 = extractvalue %dx.types.CBufRet.i32 %9, 1
  %12 = extractvalue %dx.types.CBufRet.i32 %9, 2
  %13 = extractvalue %dx.types.CBufRet.i32 %9, 3

  %14 = icmp eq i32 %10, 0 ; %10跟0是否相等   1077936128<=>3.0   1073741824<=>2.0
  %15 = select i1 %14, i32 1077936128, i32 1073741824
  %16 = select i1 %14, i32 1077936128, i32 1073741824
  %17 = select i1 %14, i32 1077936128, i32 1073741824
  %18 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %2, i32 1); 应该提取的是float b
  
  %19 = extractvalue %dx.types.CBufRet.i32 %18, 0 ; b的值
  %20 = extractvalue %dx.types.CBufRet.i32 %18, 1
  %21 = extractvalue %dx.types.CBufRet.i32 %18, 2
  %22 = extractvalue %dx.types.CBufRet.i32 %18, 3
  %23 = bitcast i32 %19 to float ; b的值是float类型, 所以要转换一下

  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %23) ; 把b的值存到 输出变量的第一个component
  %24 = bitcast i32 %15 to float ; 2.0 or 3.0 ; 这里假设是2 
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %24)

  %25 = bitcast i32 %16 to float ; 2 or 3  ; 这里假设是2 
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %25)
  %26 = bitcast i32 %17 to float ; 2 or 3  ; 这里假设是2 
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %26)
  ret void
}

attributes #0 = { nounwind readonly }
attributes #1 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!8}
!dx.entryPoints = !{!12}
!dx.source.contents = !{!18, !19, !20}
!dx.vk.xfb = !{}

!0 = !{!"Mesa version 22.04@release"}
!1 = !{i32 1, i32 1}
!2 = !{i32 1, i32 4}
!3 = !{!"vs", i32 6, i32 1}
!4 = !{null, null, !5, null}
!5 = !{!6, !7}
!6 = !{i32 0, %__ubo0* undef, !"__ubo0", i32 0, i32 0, i32 1, i32 16, null}
!7 = !{i32 1, %__ubo1* undef, !"__ubo1", i32 0, i32 1, i32 1, i32 32, null}
!8 = !{i32 1, void ()* @main, !9}
!9 = !{!10}
!10 = !{i32 0, !11, !11}
!11 = !{}
!12 = !{void ()* @main, !"main", !13, !4, !17}
!13 = !{null, !14, null}
!14 = !{!15}
!15 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 4, i32 0, i8 0, !11}
!16 = !{i32 0}
!17 = !{i32 0, i64 1048576}
!18 = !{!"num_images", i32 0}
!19 = !{!"num_ssbos", i32 0}
!20 = !{!"float_controls_execution_mode", i32 0}